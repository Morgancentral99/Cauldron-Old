--- ../src-base/minecraft/net/minecraft/entity/EntityTrackerEntry.java
+++ ../src-work/minecraft/net/minecraft/entity/EntityTrackerEntry.java
@@ -56,9 +56,15 @@
 import net.minecraft.world.storage.MapData;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import net.minecraft.server.MinecraftServer; // Spigot
 
 import cpw.mods.fml.common.network.internal.FMLNetworkHandler;
 
+// CraftBukkit start
+import org.bukkit.entity.Player;
+import org.bukkit.event.player.PlayerVelocityEvent;
+// CraftBukkit end
+
 public class EntityTrackerEntry
 {
     private static final Logger field_151262_p = LogManager.getLogger();
@@ -136,15 +142,15 @@
             this.func_151259_a(new S1BPacketEntityAttach(0, this.myEntity, this.myEntity.ridingEntity));
         }
 
-        if (this.myEntity instanceof EntityItemFrame && this.ticks % 10 == 0)
+        if (this.myEntity instanceof EntityItemFrame /*&& this.ticks % 10 == 0*/)   // CraftBukkit - Moved below, should always enter this block
         {
             EntityItemFrame entityitemframe = (EntityItemFrame)this.myEntity;
             ItemStack itemstack = entityitemframe.getDisplayedItem();
 
-            if (itemstack != null && itemstack.getItem() instanceof ItemMap)
+            if (this.ticks % 10 == 0 && itemstack != null && itemstack.getItem() instanceof ItemMap)   // CraftBukkit - Moved this.m % 10 logic here so item frames do not enter the other blocks
             {
                 MapData mapdata = Items.filled_map.getMapData(itemstack, this.myEntity.worldObj);
-                Iterator iterator = par1List.iterator();
+                Iterator iterator = this.trackingPlayers.iterator(); // CraftBukkit
 
                 while (iterator.hasNext())
                 {
@@ -182,6 +188,22 @@
                 boolean flag = Math.abs(j1) >= 4 || Math.abs(k1) >= 4 || Math.abs(l1) >= 4 || this.ticks % 60 == 0;
                 boolean flag1 = Math.abs(l - this.lastYaw) >= 4 || Math.abs(i1 - this.lastPitch) >= 4;
 
+                // CraftBukkit start - Code moved from below
+                if (flag)
+                {
+                    this.lastScaledXPosition = i;
+                    this.lastScaledYPosition = j;
+                    this.lastScaledZPosition = k;
+                }
+
+                if (flag1)
+                {
+                    this.lastYaw = l;
+                    this.lastPitch = i1;
+                }
+
+                // CraftBukkit end
+
                 if (this.ticks > 0 || this.myEntity instanceof EntityArrow)
                 {
                     if (j1 >= -128 && j1 < 128 && k1 >= -128 && k1 < 128 && l1 >= -128 && l1 < 128 && this.ticksSinceLastForcedTeleport <= 400 && !this.ridingEntity)
@@ -202,7 +224,15 @@
                     else
                     {
                         this.ticksSinceLastForcedTeleport = 0;
-                        object = new S18PacketEntityTeleport(this.myEntity.func_145782_y(), i, j, k, (byte)l, (byte)i1);
+
+                        // CraftBukkit start - Refresh list of who can see a player before sending teleport packet
+                        if (this.myEntity instanceof EntityPlayerMP)
+                        {
+                            this.sendEventsToPlayers(new java.util.ArrayList(this.trackingPlayers));
+                        }
+
+                        // CraftBukkit end
+                        object = new S18PacketEntityTeleport(this.myEntity.func_145782_y(), i, j, k, (byte) l, (byte) i1);
                     }
                 }
 
@@ -229,7 +259,7 @@
                 }
 
                 this.func_111190_b();
-
+                /* CraftBukkit start - Code moved up
                 if (flag)
                 {
                     this.lastScaledXPosition = i;
@@ -242,7 +272,7 @@
                     this.lastYaw = l;
                     this.lastPitch = i1;
                 }
-
+                // CraftBukkit end */
                 this.ridingEntity = false;
             }
             else
@@ -280,7 +310,32 @@
 
         if (this.myEntity.velocityChanged)
         {
-            this.func_151261_b(new S12PacketEntityVelocity(this.myEntity));
+            // CraftBukkit start - Create PlayerVelocity event
+            boolean cancelled = false;
+
+            if (this.myEntity instanceof EntityPlayerMP)
+            {
+                Player player = (Player) this.myEntity.getBukkitEntity();
+                org.bukkit.util.Vector velocity = player.getVelocity();
+                PlayerVelocityEvent event = new PlayerVelocityEvent(player, velocity);
+                this.myEntity.worldObj.getServer().getPluginManager().callEvent(event);
+
+                if (event.isCancelled())
+                {
+                    cancelled = true;
+                }
+                else if (!velocity.equals(event.getVelocity()))
+                {
+                    player.setVelocity(velocity);
+                }
+            }
+
+            if (!cancelled)
+            {
+                this.func_151261_b((Packet)(new S12PacketEntityVelocity(this.myEntity)));
+            }
+
+            // CraftBukkit end
             this.myEntity.velocityChanged = false;
         }
     }
@@ -301,6 +356,13 @@
 
             if (!set.isEmpty())
             {
+                // CraftBukkit start - Send scaled max health
+                if (this.myEntity instanceof EntityPlayerMP)
+                {
+                    ((EntityPlayerMP) this.myEntity).getBukkitEntity().injectScaledMaxHealth(set, false);
+                }
+
+                // CraftBukkit end
                 this.func_151261_b(new S20PacketEntityProperties(this.myEntity.func_145782_y(), set));
             }
 
@@ -352,6 +414,11 @@
     // JAVADOC METHOD $$ func_73117_b
     public void tryStartWachingThis(EntityPlayerMP par1EntityPlayerMP)
     {
+        if (Thread.currentThread() != MinecraftServer.getServer().primaryThread)
+        {
+            throw new IllegalStateException("Asynchronous player tracker update!");    // Spigot
+        }
+
         if (par1EntityPlayerMP != this.myEntity)
         {
             double d0 = par1EntityPlayerMP.posX - (double)(this.lastScaledXPosition / 32);
@@ -361,6 +428,19 @@
             {
                 if (!this.trackingPlayers.contains(par1EntityPlayerMP) && (this.isPlayerWatchingThisChunk(par1EntityPlayerMP) || this.myEntity.forceSpawn))
                 {
+                    // CraftBukkit start
+                    if (this.myEntity instanceof EntityPlayerMP)
+                    {
+                        Player player = ((EntityPlayerMP) this.myEntity).getBukkitEntity();
+
+                        if (!par1EntityPlayerMP.getBukkitEntity().canSee(player))
+                        {
+                            return;
+                        }
+                    }
+
+                    par1EntityPlayerMP.destroyedItemsNetCache.remove(Integer.valueOf(this.myEntity.func_145782_y()));
+                    // CraftBukkit end
                     this.trackingPlayers.add(par1EntityPlayerMP);
                     Packet packet = this.func_151260_c();
                     par1EntityPlayerMP.playerNetServerHandler.func_147359_a(packet);
@@ -375,6 +455,13 @@
                         ServersideAttributeMap serversideattributemap = (ServersideAttributeMap)((EntityLivingBase)this.myEntity).getAttributeMap();
                         Collection collection = serversideattributemap.func_111160_c();
 
+                        // CraftBukkit start - If sending own attributes send scaled health instead of current maximum health
+                        if (this.myEntity.func_145782_y() == par1EntityPlayerMP.func_145782_y())
+                        {
+                            ((EntityPlayerMP) this.myEntity).getBukkitEntity().injectScaledMaxHealth(collection, false);
+                        }
+
+                        // CraftBukkit end
                         if (!collection.isEmpty())
                         {
                             par1EntityPlayerMP.playerNetServerHandler.func_147359_a(new S20PacketEntityProperties(this.myEntity.func_145782_y(), collection));
@@ -403,6 +490,14 @@
                         par1EntityPlayerMP.playerNetServerHandler.func_147359_a(new S1BPacketEntityAttach(0, this.myEntity, this.myEntity.ridingEntity));
                     }
 
+                    // CraftBukkit start
+                    if (this.myEntity.riddenByEntity != null)
+                    {
+                        par1EntityPlayerMP.playerNetServerHandler.func_147359_a(new S1BPacketEntityAttach(0, this.myEntity.riddenByEntity, this.myEntity));
+                    }
+
+                    // CraftBukkit end
+
                     if (this.myEntity instanceof EntityLiving && ((EntityLiving)this.myEntity).getLeashedToEntity() != null)
                     {
                         par1EntityPlayerMP.playerNetServerHandler.func_147359_a(new S1BPacketEntityAttach(1, this.myEntity, ((EntityLiving)this.myEntity).getLeashedToEntity()));
@@ -431,6 +526,11 @@
                         }
                     }
 
+                    // CraftBukkit start - Fix for nonsensical head yaw
+                    this.lastHeadMotion = MathHelper.floor_float(this.myEntity.getRotationYawHead() * 256.0F / 360.0F); // tracker.ao() should be getHeadRotation
+                    this.func_151259_a(new S19PacketEntityHeadLook(this.myEntity, (byte) lastHeadMotion));
+                    // CraftBukkit end
+
                     if (this.myEntity instanceof EntityLivingBase)
                     {
                         EntityLivingBase entitylivingbase = (EntityLivingBase)this.myEntity;
@@ -469,7 +569,9 @@
     {
         if (this.myEntity.isDead)
         {
-            field_151262_p.warn("Fetching addPacket for removed entity");
+            // CraftBukkit start - Remove useless error spam, just return
+            // field_151262_p.warn("Fetching addPacket for removed entity");
+            // CraftBukkit end
         }
 
         Packet pkt = FMLNetworkHandler.getEntitySpawningPacket(this.myEntity);
@@ -622,6 +724,11 @@
 
     public void removePlayerFromTracker(EntityPlayerMP par1EntityPlayerMP)
     {
+        if (Thread.currentThread() != MinecraftServer.getServer().primaryThread)
+        {
+            throw new IllegalStateException("Asynchronous player tracker clear!");    // Spigot
+        }
+
         if (this.trackingPlayers.contains(par1EntityPlayerMP))
         {
             this.trackingPlayers.remove(par1EntityPlayerMP);
