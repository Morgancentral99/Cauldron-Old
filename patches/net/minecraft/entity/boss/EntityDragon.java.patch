--- ../src-base/minecraft/net/minecraft/entity/boss/EntityDragon.java
+++ ../src-work/minecraft/net/minecraft/entity/boss/EntityDragon.java
@@ -22,6 +22,19 @@
 import net.minecraft.world.Explosion;
 import net.minecraft.world.World;
 
+// CraftBukkit start
+import net.minecraft.entity.player.EntityPlayerMP;
+import net.minecraft.network.play.server.S23PacketBlockChange;
+import org.bukkit.block.BlockState;
+import org.bukkit.craftbukkit.util.BlockStateListPopulator;
+import org.bukkit.event.entity.EntityCreatePortalEvent;
+import org.bukkit.event.entity.EntityDamageEvent;
+import org.bukkit.event.entity.EntityExplodeEvent;
+import org.bukkit.event.entity.EntityRegainHealthEvent;
+import org.bukkit.event.entity.EntityTargetEvent;
+import org.bukkit.Bukkit;
+// CraftBukkit end
+
 public class EntityDragon extends EntityLiving implements IBossDisplayData, IEntityMultiPart, IMob
 {
     public double targetX;
@@ -54,6 +67,7 @@
     public int deathTicks;
     // JAVADOC FIELD $$ field_70992_bH
     public EntityEnderCrystal healingEnderCrystal;
+    private Explosion explosionSource = new Explosion(null, this, Double.NaN, Double.NaN, Double.NaN, Float.NaN); // CraftBukkit - reusable source for CraftTNTPrimed.getSource()
     private static final String __OBFID = "CL_00001659";
 
     public EntityDragon(World par1World)
@@ -368,14 +382,33 @@
             {
                 if (!this.worldObj.isRemote)
                 {
-                    this.attackEntityFromPart(this.dragonPartHead, DamageSource.setExplosionSource((Explosion)null), 10.0F);
+                    // CraftBukkit start
+                    EntityDamageEvent event = new EntityDamageEvent(this.getBukkitEntity(), org.bukkit.event.entity.EntityDamageEvent.DamageCause.ENTITY_EXPLOSION, 10.0F);
+                    Bukkit.getPluginManager().callEvent(event);
+
+                    if (!event.isCancelled())
+                    {
+                        getBukkitEntity().setLastDamageCause(event);
+                        this.attackEntityFromPart(this.dragonPartHead, DamageSource.setExplosionSource((Explosion) null), (float) event.getDamage());
+                    }
+
+                    // CraftBukkit end
                 }
 
                 this.healingEnderCrystal = null;
             }
             else if (this.ticksExisted % 10 == 0 && this.getHealth() < this.getMaxHealth())
             {
-                this.setHealth(this.getHealth() + 1.0F);
+                // CraftBukkit start
+                EntityRegainHealthEvent event = new EntityRegainHealthEvent(this.getBukkitEntity(), 1.0D, EntityRegainHealthEvent.RegainReason.ENDER_CRYSTAL);
+                this.worldObj.getServer().getPluginManager().callEvent(event);
+
+                if (!event.isCancelled())
+                {
+                    this.setHealth((float)(this.getHealth() + event.getAmount()));
+                }
+
+                // CraftBukkit end
             }
         }
 
@@ -445,7 +478,24 @@
 
         if (this.rand.nextInt(2) == 0 && !this.worldObj.playerEntities.isEmpty())
         {
-            this.target = (Entity)this.worldObj.playerEntities.get(this.rand.nextInt(this.worldObj.playerEntities.size()));
+            // CraftBukkit start
+            Entity target = (Entity) this.worldObj.playerEntities.get(this.rand.nextInt(this.worldObj.playerEntities.size()));
+            EntityTargetEvent event = new EntityTargetEvent(this.getBukkitEntity(), target.getBukkitEntity(), EntityTargetEvent.TargetReason.RANDOM_TARGET);
+            this.worldObj.getServer().getPluginManager().callEvent(event);
+
+            if (!event.isCancelled())
+            {
+                if (event.getTarget() == null)
+                {
+                    this.target = null;
+                }
+                else
+                {
+                    this.target = ((org.bukkit.craftbukkit.entity.CraftEntity) event.getTarget()).getHandle();
+                }
+            }
+
+            // CraftBukkit end
         }
         else
         {
@@ -486,6 +536,10 @@
         int j1 = MathHelper.floor_double(par1AxisAlignedBB.maxZ);
         boolean flag = false;
         boolean flag1 = false;
+        // CraftBukkit start - Create a list to hold all the destroyed blocks
+        List<org.bukkit.block.Block> destroyedBlocks = new java.util.ArrayList<org.bukkit.block.Block>();
+        org.bukkit.craftbukkit.CraftWorld craftWorld = this.worldObj.getWorld();
+        // CraftBukkit end
 
         for (int k1 = i; k1 <= l; ++k1)
         {
@@ -499,7 +553,11 @@
                     {
                         if (block.canEntityDestroy(worldObj, k1, l1, i2, this) && this.worldObj.getGameRules().getGameRuleBooleanValue("mobGriefing"))
                         {
-                            flag1 = this.worldObj.func_147468_f(k1, l1, i2) || flag1;
+                            // CraftBukkit start - Add blocks to list rather than destroying them
+                            // flag1 = this.world.setAir(k1, l1, i2) || flag1;
+                            flag1 = true;
+                            destroyedBlocks.add(craftWorld.getBlockAt(k1, l1, i2));
+                            // CraftBukkit end
                         }
                         else
                         {
@@ -512,10 +570,56 @@
 
         if (flag1)
         {
-            double d1 = par1AxisAlignedBB.minX + (par1AxisAlignedBB.maxX - par1AxisAlignedBB.minX) * (double)this.rand.nextFloat();
-            double d2 = par1AxisAlignedBB.minY + (par1AxisAlignedBB.maxY - par1AxisAlignedBB.minY) * (double)this.rand.nextFloat();
-            double d0 = par1AxisAlignedBB.minZ + (par1AxisAlignedBB.maxZ - par1AxisAlignedBB.minZ) * (double)this.rand.nextFloat();
-            this.worldObj.spawnParticle("largeexplode", d1, d2, d0, 0.0D, 0.0D, 0.0D);
+            // CraftBukkit start - Set off an EntityExplodeEvent for the dragon exploding all these blocks
+            org.bukkit.entity.Entity bukkitEntity = this.getBukkitEntity();
+            EntityExplodeEvent event = new EntityExplodeEvent(bukkitEntity, bukkitEntity.getLocation(), destroyedBlocks, 0F);
+            Bukkit.getPluginManager().callEvent(event);
+
+            if (event.isCancelled())
+            {
+                // This flag literally means 'Dragon hit something hard' (Obsidian, White Stone or Bedrock) and will cause the dragon to slow down.
+                // We should consider adding an event extension for it, or perhaps returning true if the event is cancelled.
+                return flag;
+            }
+            else if (event.getYield() == 0F)
+            {
+                // Yield zero ==> no drops
+                for (org.bukkit.block.Block block : event.blockList())
+                {
+                    this.worldObj.func_147468_f(block.getX(), block.getY(), block.getZ());
+                }
+            }
+            else
+            {
+                for (org.bukkit.block.Block block : event.blockList())
+                {
+                    org.bukkit.Material blockId = block.getType();
+
+                    if (blockId == org.bukkit.Material.AIR)
+                    {
+                        continue;
+                    }
+
+                    int blockX = block.getX();
+                    int blockY = block.getY();
+                    int blockZ = block.getZ();
+                    Block nmsBlock = org.bukkit.craftbukkit.util.CraftMagicNumbers.getBlock(blockId);
+
+                    if (nmsBlock.func_149659_a(explosionSource))
+                    {
+                        nmsBlock.func_149690_a(this.worldObj, blockX, blockY, blockZ, block.getData(), event.getYield(), 0);
+                    }
+
+                    nmsBlock.func_149723_a(worldObj, blockX, blockY, blockZ, explosionSource);
+                    this.worldObj.func_147468_f(blockX, blockY, blockZ);
+                }
+            }
+
+            // CraftBukkit end
+            double d0 = par1AxisAlignedBB.minX + (par1AxisAlignedBB.maxX - par1AxisAlignedBB.minX) * (double) this.rand.nextFloat();
+            double d1 = par1AxisAlignedBB.minY + (par1AxisAlignedBB.maxY - par1AxisAlignedBB.minY) * (double) this.rand.nextFloat();
+            double d2 = par1AxisAlignedBB.minZ + (par1AxisAlignedBB.maxZ - par1AxisAlignedBB.minZ) * (double) this.rand.nextFloat();
+            this.worldObj.spawnParticle("largeexplode", d0, d1, d2, 0.0D, 0.0D, 0.0D);
         }
 
         return flag;
@@ -550,7 +654,7 @@
         return false;
     }
 
-    protected boolean func_82195_e(DamageSource par1DamageSource, float par2)
+    public boolean func_82195_e(DamageSource par1DamageSource, float par2) // CraftBukkit - protected -> public
     {
         return super.attackEntityFrom(par1DamageSource, par2);
     }
@@ -558,6 +662,11 @@
     // JAVADOC METHOD $$ func_70609_aI
     protected void onDeathUpdate()
     {
+        if (this.isDead)
+        {
+            return;    // CraftBukkit - can't kill what's already dead
+        }
+
         ++this.deathTicks;
 
         if (this.deathTicks >= 180 && this.deathTicks <= 200)
@@ -575,7 +684,7 @@
         {
             if (this.deathTicks > 150 && this.deathTicks % 5 == 0)
             {
-                i = 1000;
+                i = this.expToDrop / 12; // CraftBukkit - drop experience as dragon falls from sky. use experience drop from death event. This is now set in getExpReward()
 
                 while (i > 0)
                 {
@@ -596,7 +705,7 @@
 
         if (this.deathTicks == 200 && !this.worldObj.isRemote)
         {
-            i = 2000;
+            i = this.expToDrop - (10 * this.expToDrop / 12); // CraftBukkit - drop the remaining experience
 
             while (i > 0)
             {
@@ -616,6 +725,8 @@
         byte b0 = 64;
         BlockEndPortal.field_149948_a = true;
         byte b1 = 4;
+        // CraftBukkit start - Replace any "this.world" in the following with just "world"!
+        BlockStateListPopulator world = new BlockStateListPopulator(this.worldObj.getWorld());
 
         for (int k = b0 - 1; k <= b0 + 32; ++k)
         {
@@ -633,35 +744,64 @@
                         {
                             if (d2 <= ((double)(b1 - 1) - 0.5D) * ((double)(b1 - 1) - 0.5D))
                             {
-                                this.worldObj.func_147449_b(l, k, i1, Blocks.bedrock);
+                                world.setTypeUpdate(l, k, i1, Blocks.bedrock);
                             }
                         }
                         else if (k > b0)
                         {
-                            this.worldObj.func_147449_b(l, k, i1, Blocks.air);
+                            world.setTypeUpdate(l, k, i1, Blocks.air);
                         }
                         else if (d2 > ((double)(b1 - 1) - 0.5D) * ((double)(b1 - 1) - 0.5D))
                         {
-                            this.worldObj.func_147449_b(l, k, i1, Blocks.bedrock);
+                            world.setTypeUpdate(l, k, i1, Blocks.bedrock);
                         }
                         else
                         {
-                            this.worldObj.func_147449_b(l, k, i1, Blocks.end_portal);
+                            world.setTypeUpdate(l, k, i1, Blocks.end_portal);
                         }
                     }
                 }
             }
         }
 
-        this.worldObj.func_147449_b(par1, b0 + 0, par2, Blocks.bedrock);
-        this.worldObj.func_147449_b(par1, b0 + 1, par2, Blocks.bedrock);
-        this.worldObj.func_147449_b(par1, b0 + 2, par2, Blocks.bedrock);
-        this.worldObj.func_147449_b(par1 - 1, b0 + 2, par2, Blocks.torch);
-        this.worldObj.func_147449_b(par1 + 1, b0 + 2, par2, Blocks.torch);
-        this.worldObj.func_147449_b(par1, b0 + 2, par2 - 1, Blocks.torch);
-        this.worldObj.func_147449_b(par1, b0 + 2, par2 + 1, Blocks.torch);
-        this.worldObj.func_147449_b(par1, b0 + 3, par2, Blocks.bedrock);
-        this.worldObj.func_147449_b(par1, b0 + 4, par2, Blocks.dragon_egg);
+        world.setType(par1, b0 + 0, par2, Blocks.bedrock);
+        world.setType(par1, b0 + 1, par2, Blocks.bedrock);
+        world.setType(par1, b0 + 2, par2, Blocks.bedrock);
+        world.setTypeAndData(par1 - 1, b0 + 2, par2, Blocks.torch, 2, 0);
+        world.setTypeAndData(par1 + 1, b0 + 2, par2, Blocks.torch, 1, 0);
+        world.setTypeAndData(par1, b0 + 2, par2 - 1, Blocks.torch, 4, 0);
+        world.setTypeAndData(par1, b0 + 2, par2 + 1, Blocks.torch, 3, 0);
+        world.setType(par1, b0 + 3, par2, Blocks.bedrock);
+        world.setType(par1, b0 + 4, par2, Blocks.dragon_egg);
+        EntityCreatePortalEvent event = new EntityCreatePortalEvent((org.bukkit.entity.LivingEntity) this.getBukkitEntity(), java.util.Collections.unmodifiableList(world.getList()), org.bukkit.PortalType.ENDER);
+        this.worldObj.getServer().getPluginManager().callEvent(event);
+
+        if (!event.isCancelled())
+        {
+            for (BlockState state : event.getBlocks())
+            {
+                state.update(true);
+            }
+        }
+        else
+        {
+            for (BlockState state : event.getBlocks())
+            {
+                S23PacketBlockChange packet = new S23PacketBlockChange(state.getX(), state.getY(), state.getZ(), this.worldObj);
+
+                for (Iterator it = this.worldObj.playerEntities.iterator(); it.hasNext();)
+                {
+                    EntityPlayer entity = (EntityPlayer) it.next();
+
+                    if (entity instanceof EntityPlayerMP)
+                    {
+                        ((EntityPlayerMP) entity).playerNetServerHandler.func_147359_a(packet);
+                    }
+                }
+            }
+        }
+
+        // CraftBukkit end
         BlockEndPortal.field_149948_a = false;
     }
 
@@ -702,4 +842,13 @@
     {
         return 5.0F;
     }
+
+    // CraftBukkit start
+    public int getExpReward()
+    {
+        // This value is equal to the amount of experience dropped while falling from the sky (10 * 1000)
+        // plus what is dropped when the dragon hits the ground (2000)
+        return 12000;
+    }
+    // CraftBukkit end
 }
