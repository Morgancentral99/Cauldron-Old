--- ../src-base/minecraft/net/minecraft/entity/EntityLivingBase.java
+++ ../src-work/minecraft/net/minecraft/entity/EntityLivingBase.java
@@ -51,13 +51,22 @@
 import net.minecraft.world.WorldServer;
 import net.minecraftforge.common.ForgeHooks;
 
+// CraftBukkit start
+import net.minecraft.nbt.NBTTagInt;
+import net.minecraft.network.play.server.S28PacketEffect;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityDamageEvent;
+import org.bukkit.event.entity.EntityRegainHealthEvent;
+// CraftBukkit end
+import org.bukkit.craftbukkit.inventory.CraftItemStack; // MCPC+
+
 public abstract class EntityLivingBase extends Entity
 {
     private static final UUID sprintingSpeedBoostModifierUUID = UUID.fromString("662A6B8D-DA3E-4C1C-8813-96EA6097278D");
     private static final AttributeModifier sprintingSpeedBoostModifier = (new AttributeModifier(sprintingSpeedBoostModifierUUID, "Sprinting speed boost", 0.30000001192092896D, 2)).setSaved(false);
     private BaseAttributeMap attributeMap;
-    private final CombatTracker _combatTracker = new CombatTracker(this);
-    private final HashMap activePotionsMap = new HashMap();
+    public CombatTracker _combatTracker = new CombatTracker(this); // CraftBukkit - private -> public, remove final
+    public final HashMap activePotionsMap = new HashMap(); // CraftBukkit - protected -> public
     // JAVADOC FIELD $$ field_82180_bT
     private final ItemStack[] previousEquipment = new ItemStack[5];
     // JAVADOC FIELD $$ field_82175_bq
@@ -94,7 +103,7 @@
     // JAVADOC FIELD $$ field_70747_aH
     public float jumpMovementFactor = 0.02F;
     // JAVADOC FIELD $$ field_70717_bb
-    protected EntityPlayer attackingPlayer;
+    public EntityPlayer attackingPlayer; // CraftBukkit - protected -> public
     // JAVADOC FIELD $$ field_70718_bc
     protected int recentlyHit;
     // JAVADOC FIELD $$ field_70729_aU
@@ -109,7 +118,7 @@
     // JAVADOC FIELD $$ field_70744_aE
     protected int scoreValue;
     // JAVADOC FIELD $$ field_110153_bc
-    protected float lastDamage;
+    public float lastDamage; // CraftBukkit - protected -> public
     // JAVADOC FIELD $$ field_70703_bu
     protected boolean isJumping;
     public float moveStrafing;
@@ -127,9 +136,9 @@
     // JAVADOC FIELD $$ field_70705_bn
     protected double newRotationPitch;
     // JAVADOC FIELD $$ field_70752_e
-    private boolean potionsNeedUpdate = true;
+    public boolean potionsNeedUpdate = true; // CraftBukkit - private -> public
     // JAVADOC FIELD $$ field_70755_b
-    private EntityLivingBase entityLivingToAttack;
+    public EntityLivingBase entityLivingToAttack; // CraftBukkit - private -> public
     private int revengeTimer;
     private EntityLivingBase lastAttacker;
     // JAVADOC FIELD $$ field_142016_bo
@@ -139,13 +148,18 @@
     // JAVADOC FIELD $$ field_70773_bE
     private int jumpTicks;
     private float field_110151_bq;
+    // CraftBukkit start
+    public int expToDrop;
+    public int maxAirTicks = 300;
+    // CraftBukkit end
     private static final String __OBFID = "CL_00001549";
 
     public EntityLivingBase(World par1World)
     {
         super(par1World);
         this.applyEntityAttributes();
-        this.setHealth(this.getMaxHealth());
+        // CraftBukkit - setHealth(getMaxHealth()) inlined and simplified to skip the instanceof check for EntityPlayer, as getBukkitEntity() is not initialized in constructor
+        this.dataWatcher.updateObject(6, (float) this.getEntityAttribute(SharedMonsterAttributes.maxHealth).getAttributeValue());
         this.preventEntitySpawning = true;
         this.field_70770_ap = (float)(Math.random() + 1.0D) * 0.01F;
         this.setPosition(this.posX, this.posY, this.posZ);
@@ -201,7 +215,18 @@
             }
             else if (!this.worldObj.isRemote && this.fallDistance > 3.0F)
             {
-                this.worldObj.playAuxSFX(2006, i, j, k, MathHelper.ceiling_float_int(this.fallDistance - 3.0F));
+                // CraftBukkit start - supply player as argument in particles for visibility API to work
+                if (this instanceof EntityPlayerMP)
+                {
+                    this.worldObj.playAuxSFXAtEntity((EntityPlayer) this, 2006, i, j, k, MathHelper.ceiling_float_int(this.fallDistance - 3.0F));
+                    ((EntityPlayerMP) this).playerNetServerHandler.func_147359_a(new S28PacketEffect(2006, i, j, k, MathHelper.ceiling_float_int(this.fallDistance - 3.0F), false));
+                }
+                else
+                {
+                    this.worldObj.playAuxSFX(2006, i, j, k, MathHelper.ceiling_float_int(this.fallDistance - 3.0F));
+                }
+
+                // CraftBukkit end
             }
 
             block.func_149746_a(this.worldObj, i, j, k, this, this.fallDistance);
@@ -263,7 +288,13 @@
         }
         else
         {
-            this.setAir(300);
+            // CraftBukkit start - Only set if needed to work around a DataWatcher inefficiency
+            if (this.getAir() != 300)
+            {
+                this.setAir(maxAirTicks);
+            }
+
+            // CraftBukkit end
         }
 
         if (this.isEntityAlive() && this.isWet())
@@ -328,6 +359,22 @@
         this.worldObj.theProfiler.endSection();
     }
 
+    // CraftBukkit start
+    public int getExpReward()
+    {
+        int exp = this.getExperiencePoints(this.attackingPlayer);
+
+        if (!this.worldObj.isRemote && (this.recentlyHit > 0 || this.isPlayer()) && this.func_146066_aG())
+        {
+            return exp;
+        }
+        else
+        {
+            return 0;
+        }
+    }
+    // CraftBukkit end
+
     // JAVADOC METHOD $$ func_70631_g_
     public boolean isChild()
     {
@@ -339,22 +386,21 @@
     {
         ++this.deathTime;
 
-        if (this.deathTime == 20)
+        if (this.deathTime >= 20 && !this.isDead)   // CraftBukkit - (this.deathTicks == 20) -> (this.deathTicks >= 20 && !this.dead)
         {
             int i;
+            // CraftBukkit start - Update getExpReward() above if the removed if() changes!
+            i = this.expToDrop;
 
-            if (!this.worldObj.isRemote && (this.recentlyHit > 0 || this.isPlayer()) && this.func_146066_aG() && this.worldObj.getGameRules().getGameRuleBooleanValue("doMobLoot"))
+            while (i > 0)
             {
-                i = this.getExperiencePoints(this.attackingPlayer);
-
-                while (i > 0)
-                {
-                    int j = EntityXPOrb.getXPSplit(i);
-                    i -= j;
-                    this.worldObj.spawnEntityInWorld(new EntityXPOrb(this.worldObj, this.posX, this.posY, this.posZ, j));
-                }
+                int j = EntityXPOrb.getXPSplit(i);
+                i -= j;
+                this.worldObj.spawnEntityInWorld(new EntityXPOrb(this.worldObj, this.posX, this.posY, this.posZ, j));
             }
 
+            this.expToDrop = 0;
+            // CraftBukkit end
             this.setDead();
 
             for (i = 0; i < 20; ++i)
@@ -521,6 +567,23 @@
             }
         }
 
+        // CraftBukkit start
+        if (par1NBTTagCompound.hasKey("Bukkit.MaxHealth"))
+        {
+            NBTBase nbtbase = par1NBTTagCompound.getTag("Bukkit.MaxHealth");
+
+            if (nbtbase.getId() == 5)
+            {
+                this.getEntityAttribute(SharedMonsterAttributes.maxHealth).setAttribute((double)((NBTTagFloat) nbtbase).func_150291_c());
+            }
+            else if (nbtbase.getId() == 3)
+            {
+                this.getEntityAttribute(SharedMonsterAttributes.maxHealth).setAttribute((double)((NBTTagInt) nbtbase).func_150287_d());
+            }
+        }
+
+        // CraftBukkit end
+
         if (par1NBTTagCompound.func_150297_b("HealF", 99))
         {
             this.setHealth(par1NBTTagCompound.getFloat("HealF"));
@@ -650,12 +713,14 @@
 
     public boolean isPotionActive(int par1)
     {
-        return this.activePotionsMap.containsKey(Integer.valueOf(par1));
+        // CraftBukkit - Add size check for efficiency
+        return this.activePotionsMap.size() != 0 && this.activePotionsMap.containsKey(Integer.valueOf(par1));
     }
 
     public boolean isPotionActive(Potion par1Potion)
     {
-        return this.activePotionsMap.containsKey(Integer.valueOf(par1Potion.id));
+        // CraftBukkit - Add size check for efficiency
+        return this.activePotionsMap.size() != 0 && this.activePotionsMap.containsKey(Integer.valueOf(par1Potion.id));
     }
 
     // JAVADOC METHOD $$ func_70660_b
@@ -752,23 +817,66 @@
     }
 
     // JAVADOC METHOD $$ func_70691_i
+    // CraftBukkit start - Delegate so we can handle providing a reason for health being regained
     public void heal(float par1)
     {
+        heal(par1, EntityRegainHealthEvent.RegainReason.CUSTOM);
+    }
+
+    public void heal(float f, EntityRegainHealthEvent.RegainReason regainReason)
+    {
         float f1 = this.getHealth();
 
         if (f1 > 0.0F)
         {
-            this.setHealth(f1 + par1);
+            EntityRegainHealthEvent event = new EntityRegainHealthEvent(this.getBukkitEntity(), f, regainReason);
+            this.worldObj.getServer().getPluginManager().callEvent(event);
+
+            if (!event.isCancelled())
+            {
+                this.setHealth((float)(this.getHealth() + event.getAmount()));
+            }
         }
     }
 
     public final float getHealth()
     {
+        // CraftBukkit start - Use unscaled health
+        if (this instanceof EntityPlayerMP)
+        {
+            return (float)((EntityPlayerMP) this).getBukkitEntity().getHealth();
+        }
+
+        // CraftBukkit end
         return this.dataWatcher.getWatchableObjectFloat(6);
     }
 
     public void setHealth(float par1)
     {
+        // CraftBukkit start - Handle scaled health
+        if (this instanceof EntityPlayerMP)
+        {
+            org.bukkit.craftbukkit.entity.CraftPlayer player = ((EntityPlayerMP) this).getBukkitEntity();
+
+            // Squeeze
+            if (par1 < 0.0F)
+            {
+                player.setRealHealth(0.0D);
+            }
+            else if (par1 > player.getMaxHealth())
+            {
+                player.setRealHealth(player.getMaxHealth());
+            }
+            else
+            {
+                player.setRealHealth(par1);
+            }
+
+            this.dataWatcher.updateObject(6, Float.valueOf(player.getScaledHealth()));
+            return;
+        }
+
+        // CraftBukkit end
         this.dataWatcher.updateObject(6, Float.valueOf(MathHelper.clamp_float(par1, 0.0F, this.getMaxHealth())));
     }
 
@@ -806,9 +914,23 @@
 
                 this.limbSwingAmount = 1.5F;
                 boolean flag = true;
+                // CraftBukkit start
+                EntityDamageEvent event = CraftEventFactory.handleEntityDamageEvent(this, par1DamageSource, par2);
 
-                if ((float)this.hurtResistantTime > (float)this.maxHurtResistantTime / 2.0F)
+                if (event != null)
                 {
+                    if (event.isCancelled())
+                    {
+                        return false;
+                    }
+
+                    par2 = (float) event.getDamage();
+                }
+
+                // CraftBukkit end
+
+                if ((float) this.hurtResistantTime > (float) this.maxHurtResistantTime / 2.0F)
+                {
                     if (par2 <= this.lastDamage)
                     {
                         return false;
@@ -980,6 +1102,21 @@
 
             if (!ForgeHooks.onLivingDrops(this, par1DamageSource, capturedDrops, i, recentlyHit > 0, j))
             {
+                // MCPC+ start - capture drops for plugins then fire event
+                if (this.capturedDrops.size() > 0)
+                {
+                    java.util.List<org.bukkit.inventory.ItemStack> loot = new java.util.ArrayList<org.bukkit.inventory.ItemStack>();
+                    for (EntityItem item : capturedDrops)
+                    {
+                        loot.add(CraftItemStack.asCraftMirror(item.getEntityItem()));
+                    }
+                    CraftEventFactory.callEntityDeathEvent(this, loot);
+                }
+                else
+                {
+                    CraftEventFactory.callEntityDeathEvent(this);
+                }
+                // MCPC+ end
                 for (EntityItem item : capturedDrops)
                 {
                     worldObj.spawnEntityInWorld(item);
@@ -1056,11 +1193,31 @@
         super.fall(par1);
         PotionEffect potioneffect = this.getActivePotionEffect(Potion.jump);
         float f1 = potioneffect != null ? (float)(potioneffect.getAmplifier() + 1) : 0.0F;
-        int i = MathHelper.ceiling_float_int(par1 - 3.0F - f1);
+        // CraftBukkit start
+        float i = MathHelper.ceiling_float_int(par1 - 3.0F - f1);
 
         if (i > 0)
         {
-            this.playSound(this.func_146067_o(i), 1.0F, 1.0F);
+            EntityDamageEvent event = CraftEventFactory.callEntityDamageEvent(null, this, EntityDamageEvent.DamageCause.FALL, i);
+
+            if (event.isCancelled())
+            {
+                return;
+            }
+
+            i = (float) event.getDamage();
+
+            if (i > 0)
+            {
+                this.getBukkitEntity().setLastDamageCause(event);
+            }
+        }
+
+        // CraftBukkit end
+
+        if (i > 0)
+        {
+            this.playSound(this.func_146067_o(org.bukkit.util.NumberConversions.ceil(i)), 1.0F, 1.0F); // CraftBukkit - ceil
             this.attackEntityFrom(DamageSource.fall, (float)i);
             int j = MathHelper.floor_double(this.posX);
             int k = MathHelper.floor_double(this.posY - 0.20000000298023224D - (double)this.yOffset);
@@ -1695,7 +1852,8 @@
         {
             f3 = 1.0F;
             f2 = (float)Math.sqrt((double)f) * 3.0F;
-            f1 = (float)Math.atan2(d1, d0) * 180.0F / (float)Math.PI - 90.0F;
+            // CraftBukkit - Math -> TrigMath
+            f1 = (float) org.bukkit.craftbukkit.TrigMath.atan2(d1, d0) * 180.0F / (float)Math.PI - 90.0F;
         }
 
         if (this.swingProgress > 0.0F)
@@ -1904,17 +2062,37 @@
     {
         List list = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand(0.20000000298023224D, 0.0D, 0.20000000298023224D));
 
-        if (list != null && !list.isEmpty())
+        if (this.canBeCollidedWith() && list != null && !list.isEmpty())   // Spigot: Add this.canBeCollidedWith() condition
         {
+            numCollisions -= worldObj.spigotConfig.maxCollisionsPerEntity; // Spigot
+
             for (int i = 0; i < list.size(); ++i)
             {
-                Entity entity = (Entity)list.get(i);
+                if (numCollisions > worldObj.spigotConfig.maxCollisionsPerEntity)
+                {
+                    break;    // Spigot
+                }
 
+                Entity entity = (Entity) list.get(i);
+
+                // TODO better check now?
+                // CraftBukkit start - Only handle mob (non-player) collisions every other tick
+                if (entity instanceof EntityLivingBase && !(this instanceof EntityPlayerMP) && this.ticksExisted % 2 == 0)
+                {
+                    continue;
+                }
+
+                // CraftBukkit end
+
                 if (entity.canBePushed())
                 {
+                    entity.numCollisions++; // Spigot
+                    numCollisions++; // Spigot
                     this.collideWithEntity(entity);
                 }
             }
+
+            numCollisions = 0; // Spigot
         }
     }
 
