--- ../src-base/minecraft/net/minecraft/server/management/PlayerManager.java
+++ ../src-work/minecraft/net/minecraft/server/management/PlayerManager.java
@@ -18,6 +18,12 @@
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.event.world.ChunkWatchEvent;
 
+// CraftBukkit start
+import java.util.Collections;
+import java.util.Queue;
+import java.util.LinkedList;
+// CraftBukkit end
+
 public class PlayerManager
 {
     private final WorldServer theWorldServer;
@@ -26,15 +32,16 @@
     // JAVADOC FIELD $$ field_72700_c
     private final LongHashMap playerInstances = new LongHashMap();
     // JAVADOC FIELD $$ field_72697_d
-    private final List chunkWatcherWithPlayers = new ArrayList();
+    private final Queue chunkWatcherWithPlayers = new java.util.concurrent.ConcurrentLinkedQueue(); // CraftBukkit ArrayList -> ConcurrentLinkedQueue
     // JAVADOC FIELD $$ field_111193_e
-    private final List playerInstanceList = new ArrayList();
+    private final Queue playerInstanceList = new java.util.concurrent.ConcurrentLinkedQueue(); // CraftBukkit ArrayList -> ConcurrentLinkedQueue
     // JAVADOC FIELD $$ field_72698_e
     private final int playerViewRadius;
     // JAVADOC FIELD $$ field_111192_g
     private long previousTotalWorldTime;
     // JAVADOC FIELD $$ field_72696_f
     private final int[][] xzDirectionsConst = new int[][] {{1, 0}, {0, 1}, { -1, 0}, {0, -1}};
+    private boolean wasNotEmpty; // CraftBukkit
     private static final String __OBFID = "CL_00001434";
 
     public PlayerManager(WorldServer par1WorldServer, int par2)
@@ -69,34 +76,54 @@
         if (i - this.previousTotalWorldTime > 8000L)
         {
             this.previousTotalWorldTime = i;
+            // CraftBukkit start - Use iterator
+            java.util.Iterator iterator = this.playerInstanceList.iterator();
 
-            for (j = 0; j < this.playerInstanceList.size(); ++j)
+            while (iterator.hasNext())
             {
-                playerinstance = (PlayerManager.PlayerInstance)this.playerInstanceList.get(j);
+                playerinstance = (PlayerManager.PlayerInstance) iterator.next();
                 playerinstance.sendChunkUpdate();
                 playerinstance.processChunk();
             }
         }
         else
         {
-            for (j = 0; j < this.chunkWatcherWithPlayers.size(); ++j)
+            java.util.Iterator iterator = this.chunkWatcherWithPlayers.iterator();
+
+            while (iterator.hasNext())
             {
-                playerinstance = (PlayerManager.PlayerInstance)this.chunkWatcherWithPlayers.get(j);
+                playerinstance = (PlayerManager.PlayerInstance) iterator.next();
                 playerinstance.sendChunkUpdate();
+                iterator.remove();
+                // CraftBukkit end
             }
         }
 
-        this.chunkWatcherWithPlayers.clear();
+        // this.chunkWatcherWithPlayers.clear(); // CraftBukkit - Removals are already covered
 
         if (this.players.isEmpty())
         {
+            if (!wasNotEmpty)
+            {
+                return;    // CraftBukkit - Only do unload when we go from non-empty to empty
+            }
+
             WorldProvider worldprovider = this.theWorldServer.provider;
 
             if (!worldprovider.canRespawnHere())
             {
                 this.theWorldServer.theChunkProviderServer.unloadAllChunks();
             }
+
+            // CraftBukkit start
+            wasNotEmpty = false;
         }
+        else
+        {
+            wasNotEmpty = true;
+        }
+
+        // CraftBukkit end
     }
 
     private PlayerManager.PlayerInstance getOrCreateChunkWatcher(int par1, int par2, boolean par3)
@@ -113,7 +140,20 @@
 
         return playerinstance;
     }
+    // CraftBukkit start
+    public final boolean isChunkInUse(int x, int z)
+    {
+        PlayerManager.PlayerInstance pi = getOrCreateChunkWatcher(x, z, false);
 
+        if (pi != null)
+        {
+            return (pi.playersInChunk.size() > 0);
+        }
+
+        return false;
+    }
+    // CraftBukkit end
+
     public void func_151250_a(int p_151250_1_, int p_151250_2_, int p_151250_3_)
     {
         int l = p_151250_1_ >> 4;
@@ -133,15 +173,25 @@
         int j = (int)par1EntityPlayerMP.posZ >> 4;
         par1EntityPlayerMP.managedPosX = par1EntityPlayerMP.posX;
         par1EntityPlayerMP.managedPosZ = par1EntityPlayerMP.posZ;
+        // CraftBukkit start - Load nearby chunks first
+        List<ChunkCoordIntPair> chunkList = new LinkedList<ChunkCoordIntPair>();
 
         for (int k = i - this.playerViewRadius; k <= i + this.playerViewRadius; ++k)
         {
             for (int l = j - this.playerViewRadius; l <= j + this.playerViewRadius; ++l)
             {
-                this.getOrCreateChunkWatcher(k, l, true).addPlayer(par1EntityPlayerMP);
+                chunkList.add(new ChunkCoordIntPair(k, l));
             }
         }
 
+        Collections.sort(chunkList, new ChunkCoordComparator(par1EntityPlayerMP));
+
+        for (ChunkCoordIntPair pair : chunkList)
+        {
+            this.getOrCreateChunkWatcher(pair.chunkXPos, pair.chunkZPos, true).addPlayer(par1EntityPlayerMP);
+        }
+
+        // CraftBukkit end
         this.players.add(par1EntityPlayerMP);
         this.filterChunkLoadQueue(par1EntityPlayerMP);
     }
@@ -247,6 +297,7 @@
             int i1 = this.playerViewRadius;
             int j1 = i - k;
             int k1 = j - l;
+            List<ChunkCoordIntPair> chunksToLoad = new LinkedList<ChunkCoordIntPair>(); // CraftBukkit
 
             if (j1 != 0 || k1 != 0)
             {
@@ -274,6 +325,20 @@
                 this.filterChunkLoadQueue(par1EntityPlayerMP);
                 par1EntityPlayerMP.managedPosX = par1EntityPlayerMP.posX;
                 par1EntityPlayerMP.managedPosZ = par1EntityPlayerMP.posZ;
+                // CraftBukkit start - send nearest chunks first
+                Collections.sort(chunksToLoad, new ChunkCoordComparator(par1EntityPlayerMP));
+
+                for (ChunkCoordIntPair pair : chunksToLoad)
+                {
+                    this.getOrCreateChunkWatcher(pair.chunkXPos, pair.chunkZPos, true).addPlayer(par1EntityPlayerMP);
+                }
+
+                if (i1 > 1 || i1 < -1 || j1 > 1 || j1 < -1)
+                {
+                    Collections.sort(par1EntityPlayerMP.loadedChunks, new ChunkCoordComparator(par1EntityPlayerMP));
+                }
+
+                // CraftBukkit end
             }
         }
     }
@@ -290,9 +355,66 @@
         return par0 * 16 - 16;
     }
 
+    // CraftBukkit start - Sorter to load nearby chunks first
+    private static class ChunkCoordComparator implements java.util.Comparator<ChunkCoordIntPair>
+    {
+        private int x;
+        private int z;
+
+        public ChunkCoordComparator(EntityPlayerMP entityplayer)
+        {
+            x = (int) entityplayer.posX >> 4;
+            z = (int) entityplayer.posZ >> 4;
+        }
+
+        public int compare(ChunkCoordIntPair a, ChunkCoordIntPair b)
+        {
+            if (a.equals(b))
+            {
+                return 0;
+            }
+
+            // Subtract current position to set center point
+            int ax = a.chunkXPos - this.x;
+            int az = a.chunkZPos - this.z;
+            int bx = b.chunkXPos - this.x;
+            int bz = b.chunkZPos - this.z;
+            int result = ((ax - bx) * (ax + bx)) + ((az - bz) * (az + bz));
+
+            if (result != 0)
+            {
+                return result;
+            }
+
+            if (ax < 0)
+            {
+                if (bx < 0)
+                {
+                    return bz - az;
+                }
+                else
+                {
+                    return -1;
+                }
+            }
+            else
+            {
+                if (bx < 0)
+                {
+                    return 1;
+                }
+                else
+                {
+                    return az - bz;
+                }
+            }
+        }
+    }
+    // CraftBukkit end
+
     class PlayerInstance
     {
-        private final List playersInChunk = new ArrayList();
+        public final List playersInChunk = new ArrayList(); // MCPC+ - private -> public
         // JAVADOC FIELD $$ field_73264_c
         private final ChunkCoordIntPair chunkLocation;
         private short[] field_151254_d = new short[64];
