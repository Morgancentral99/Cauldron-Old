--- ../src-base/minecraft/net/minecraft/server/management/PlayerManager.java
+++ ../src-work/minecraft/net/minecraft/server/management/PlayerManager.java
@@ -2,6 +2,7 @@
 
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.HashMap;
 import java.util.List;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.network.Packet;
@@ -18,16 +19,25 @@
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.event.world.ChunkWatchEvent;
 
+// CraftBukkit start
+import java.util.Collections;
+import java.util.Queue;
+import java.util.LinkedList;
+// CraftBukkit end
+
+import org.bukkit.craftbukkit.chunkio.ChunkIOExecutor;
+
 public class PlayerManager
 {
     private final WorldServer theWorldServer;
     private final List players = new ArrayList();
     private final LongHashMap playerInstances = new LongHashMap();
-    private final List chunkWatcherWithPlayers = new ArrayList();
-    private final List playerInstanceList = new ArrayList();
+    private final Queue chunkWatcherWithPlayers = new java.util.concurrent.ConcurrentLinkedQueue(); // CraftBukkit ArrayList -> ConcurrentLinkedQueue
+    private final Queue playerInstanceList = new java.util.concurrent.ConcurrentLinkedQueue(); // CraftBukkit ArrayList -> ConcurrentLinkedQueue
     private final int playerViewRadius;
     private long previousTotalWorldTime;
     private final int[][] xzDirectionsConst = new int[][] {{1, 0}, {0, 1}, { -1, 0}, {0, -1}};
+    private boolean wasNotEmpty; // CraftBukkit
     private static final String __OBFID = "CL_00001434";
 
     public PlayerManager(WorldServer par1WorldServer, int par2)
@@ -36,7 +46,7 @@
         {
             throw new IllegalArgumentException("Too big view radius!");
         }
-        else if (par2 < 3)
+        else if (par2 < 1) // Spigot
         {
             throw new IllegalArgumentException("Too small view radius!");
         }
@@ -61,34 +71,54 @@
         if (i - this.previousTotalWorldTime > 8000L)
         {
             this.previousTotalWorldTime = i;
+            // CraftBukkit start - Use iterator
+            java.util.Iterator iterator = this.playerInstanceList.iterator();
 
-            for (j = 0; j < this.playerInstanceList.size(); ++j)
+            while (iterator.hasNext())
             {
-                playerinstance = (PlayerManager.PlayerInstance)this.playerInstanceList.get(j);
+                playerinstance = (PlayerManager.PlayerInstance) iterator.next();
                 playerinstance.sendChunkUpdate();
                 playerinstance.processChunk();
             }
         }
         else
         {
-            for (j = 0; j < this.chunkWatcherWithPlayers.size(); ++j)
+            java.util.Iterator iterator = this.chunkWatcherWithPlayers.iterator();
+
+            while (iterator.hasNext())
             {
-                playerinstance = (PlayerManager.PlayerInstance)this.chunkWatcherWithPlayers.get(j);
+                playerinstance = (PlayerManager.PlayerInstance) iterator.next();
                 playerinstance.sendChunkUpdate();
+                iterator.remove();
+                // CraftBukkit end
             }
         }
 
-        this.chunkWatcherWithPlayers.clear();
+        // this.chunkWatcherWithPlayers.clear(); // CraftBukkit - Removals are already covered
 
         if (this.players.isEmpty())
         {
+            if (!wasNotEmpty)
+            {
+                return;    // CraftBukkit - Only do unload when we go from non-empty to empty
+            }
+
             WorldProvider worldprovider = this.theWorldServer.provider;
 
             if (!worldprovider.canRespawnHere())
             {
                 this.theWorldServer.theChunkProviderServer.unloadAllChunks();
             }
+
+            // CraftBukkit start
+            wasNotEmpty = false;
         }
+        else
+        {
+            wasNotEmpty = true;
+        }
+
+        // CraftBukkit end
     }
 
     private PlayerManager.PlayerInstance getOrCreateChunkWatcher(int par1, int par2, boolean par3)
@@ -105,7 +135,20 @@
 
         return playerinstance;
     }
+    // CraftBukkit start
+    public final boolean isChunkInUse(int x, int z)
+    {
+        PlayerManager.PlayerInstance pi = getOrCreateChunkWatcher(x, z, false);
 
+        if (pi != null)
+        {
+            return (pi.playersWatchingChunk.size() > 0);
+        }
+
+        return false;
+    }
+    // CraftBukkit end
+
     public void markBlockForUpdate(int p_151250_1_, int p_151250_2_, int p_151250_3_)
     {
         int l = p_151250_1_ >> 4;
@@ -124,15 +167,25 @@
         int j = (int)par1EntityPlayerMP.posZ >> 4;
         par1EntityPlayerMP.managedPosX = par1EntityPlayerMP.posX;
         par1EntityPlayerMP.managedPosZ = par1EntityPlayerMP.posZ;
+        // CraftBukkit start - Load nearby chunks first
+        List<ChunkCoordIntPair> chunkList = new LinkedList<ChunkCoordIntPair>();
 
         for (int k = i - this.playerViewRadius; k <= i + this.playerViewRadius; ++k)
         {
             for (int l = j - this.playerViewRadius; l <= j + this.playerViewRadius; ++l)
             {
-                this.getOrCreateChunkWatcher(k, l, true).addPlayer(par1EntityPlayerMP);
+                chunkList.add(new ChunkCoordIntPair(k, l));
             }
         }
 
+        Collections.sort(chunkList, new ChunkCoordComparator(par1EntityPlayerMP));
+
+        for (ChunkCoordIntPair pair : chunkList)
+        {
+            this.getOrCreateChunkWatcher(pair.chunkXPos, pair.chunkZPos, true).addPlayer(par1EntityPlayerMP);
+        }
+
+        // CraftBukkit end
         this.players.add(par1EntityPlayerMP);
         this.filterChunkLoadQueue(par1EntityPlayerMP);
     }
@@ -234,6 +287,7 @@
             int i1 = this.playerViewRadius;
             int j1 = i - k;
             int k1 = j - l;
+            List<ChunkCoordIntPair> chunksToLoad = new LinkedList<ChunkCoordIntPair>(); // CraftBukkit
 
             if (j1 != 0 || k1 != 0)
             {
@@ -243,7 +297,7 @@
                     {
                         if (!this.overlaps(l1, i2, k, l, i1))
                         {
-                            this.getOrCreateChunkWatcher(l1, i2, true).addPlayer(par1EntityPlayerMP);
+                            chunksToLoad.add(new ChunkCoordIntPair(l1, i2)); // CraftBukkit
                         }
 
                         if (!this.overlaps(l1 - j1, i2 - k1, i, j, i1))
@@ -261,6 +315,20 @@
                 this.filterChunkLoadQueue(par1EntityPlayerMP);
                 par1EntityPlayerMP.managedPosX = par1EntityPlayerMP.posX;
                 par1EntityPlayerMP.managedPosZ = par1EntityPlayerMP.posZ;
+                // CraftBukkit start - send nearest chunks first
+                Collections.sort(chunksToLoad, new ChunkCoordComparator(par1EntityPlayerMP));
+
+                for (ChunkCoordIntPair pair : chunksToLoad)
+                {
+                    this.getOrCreateChunkWatcher(pair.chunkXPos, pair.chunkZPos, true).addPlayer(par1EntityPlayerMP);
+                }
+
+                if (i1 > 1 || i1 < -1 || j1 > 1 || j1 < -1)
+                {
+                    Collections.sort(par1EntityPlayerMP.loadedChunks, new ChunkCoordComparator(par1EntityPlayerMP));
+                }
+
+                // CraftBukkit end
             }
         }
     }
@@ -276,23 +344,93 @@
         return par0 * 16 - 16;
     }
 
+    // CraftBukkit start - Sorter to load nearby chunks first
+    private static class ChunkCoordComparator implements java.util.Comparator<ChunkCoordIntPair>
+    {
+        private int x;
+        private int z;
+
+        public ChunkCoordComparator(EntityPlayerMP entityplayer)
+        {
+            x = (int) entityplayer.posX >> 4;
+            z = (int) entityplayer.posZ >> 4;
+        }
+
+        public int compare(ChunkCoordIntPair a, ChunkCoordIntPair b)
+        {
+            if (a.equals(b))
+            {
+                return 0;
+            }
+
+            // Subtract current position to set center point
+            int ax = a.chunkXPos - this.x;
+            int az = a.chunkZPos - this.z;
+            int bx = b.chunkXPos - this.x;
+            int bz = b.chunkZPos - this.z;
+            int result = ((ax - bx) * (ax + bx)) + ((az - bz) * (az + bz));
+
+            if (result != 0)
+            {
+                return result;
+            }
+
+            if (ax < 0)
+            {
+                if (bx < 0)
+                {
+                    return bz - az;
+                }
+                else
+                {
+                    return -1;
+                }
+            }
+            else
+            {
+                if (bx < 0)
+                {
+                    return 1;
+                }
+                else
+                {
+                    return az - bz;
+                }
+            }
+        }
+    }
+    // CraftBukkit end
+
     class PlayerInstance
     {
-        private final List playersWatchingChunk = new ArrayList();
-        private final ChunkCoordIntPair chunkLocation;
-        private short[] locationOfBlockChange = new short[64];
+        private List playersWatchingChunk;
+        final ChunkCoordIntPair chunkLocation; // MCPC+ - remove private
+        private short[] locationOfBlockChange;
         private int numberOfTilesToUpdate;
         private int flagsYAreasToUpdate;
         private long previousWorldTime;
+        // CraftBukkit start
+        private final HashMap<EntityPlayerMP, Runnable> players = new HashMap<EntityPlayerMP, Runnable>();
+        public boolean loaded = false;
+        private Runnable loadedRunnable = new Runnable()
+        {
+            public void run()
+            {
+                PlayerInstance.this.loaded = true;
+            }
+        };
+        // CraftBukkit end
         private static final String __OBFID = "CL_00001435";
 
         public PlayerInstance(int par2, int par3)
         {
+            this.playersWatchingChunk = new ArrayList();
+            this.locationOfBlockChange = new short[64];
             this.chunkLocation = new ChunkCoordIntPair(par2, par3);
-            PlayerManager.this.getWorldServer().theChunkProviderServer.loadChunk(par2, par3);
+            PlayerManager.this.theWorldServer.theChunkProviderServer.getChunkAt(par2, par3, this.loadedRunnable); // CraftBukkit
         }
 
-        public void addPlayer(EntityPlayerMP par1EntityPlayerMP)
+        public void addPlayer(final EntityPlayerMP par1EntityPlayerMP)   // CraftBukkit - added final to argument
         {
             if (this.playersWatchingChunk.contains(par1EntityPlayerMP))
             {
@@ -306,7 +444,28 @@
                 }
 
                 this.playersWatchingChunk.add(par1EntityPlayerMP);
-                par1EntityPlayerMP.loadedChunks.add(this.chunkLocation);
+                // CraftBukkit start
+                Runnable playerRunnable;
+
+                if (this.loaded)
+                {
+                    playerRunnable = null;
+                    par1EntityPlayerMP.loadedChunks.add(this.chunkLocation);
+                }
+                else
+                {
+                    playerRunnable = new Runnable()
+                    {
+                        public void run()
+                        {
+                            par1EntityPlayerMP.loadedChunks.add(PlayerInstance.this.chunkLocation);
+                        }
+                    };
+                    PlayerManager.this.getWorldServer().theChunkProviderServer.getChunkAt(this.chunkLocation.chunkXPos, this.chunkLocation.chunkZPos, playerRunnable);
+                }
+
+                this.players.put(par1EntityPlayerMP, playerRunnable);
+                // CraftBukkit end
             }
         }
 
@@ -314,6 +473,25 @@
         {
             if (this.playersWatchingChunk.contains(par1EntityPlayerMP))
             {
+                // CraftBukkit start - If we haven't loaded yet don't load the chunk just so we can clean it up
+                if (!this.loaded)
+                {
+                    ChunkIOExecutor.dropQueuedChunkLoad(PlayerManager.this.getWorldServer(), this.chunkLocation.chunkXPos, this.chunkLocation.chunkZPos, this.players.get(par1EntityPlayerMP));
+                    this.playersWatchingChunk.remove(par1EntityPlayerMP);
+                    this.players.remove(par1EntityPlayerMP);
+
+                    if (this.playersWatchingChunk.isEmpty())
+                    {
+                        ChunkIOExecutor.dropQueuedChunkLoad(PlayerManager.this.getWorldServer(), this.chunkLocation.chunkXPos, this.chunkLocation.chunkZPos, this.loadedRunnable);
+                        long i = (long) this.chunkLocation.chunkXPos + 2147483647L | (long) this.chunkLocation.chunkZPos + 2147483647L << 32;
+                        PlayerManager.this.playerInstances.remove(i);
+                        PlayerManager.this.playerInstanceList.remove(this);
+                    }
+
+                    return;
+                }
+
+                // CraftBukkit end
                 Chunk chunk = PlayerManager.this.theWorldServer.getChunkFromChunkCoords(this.chunkLocation.chunkXPos, this.chunkLocation.chunkZPos);
 
                 if (chunk.func_150802_k())
@@ -321,6 +499,7 @@
                     par1EntityPlayerMP.playerNetServerHandler.sendPacket(new S21PacketChunkData(chunk, true, 0));
                 }
 
+                this.players.remove(par1EntityPlayerMP); // CraftBukkit
                 this.playersWatchingChunk.remove(par1EntityPlayerMP);
                 par1EntityPlayerMP.loadedChunks.remove(this.chunkLocation);
 
@@ -424,7 +603,7 @@
                     {
                         i = this.chunkLocation.chunkXPos * 16;
                         j = this.chunkLocation.chunkZPos * 16;
-                        this.sendToAllPlayersWatchingChunk(new S21PacketChunkData(PlayerManager.this.theWorldServer.getChunkFromChunkCoords(this.chunkLocation.chunkXPos, this.chunkLocation.chunkZPos), false, this.flagsYAreasToUpdate));
+                        this.sendToAllPlayersWatchingChunk(new S21PacketChunkData(PlayerManager.this.theWorldServer.getChunkFromChunkCoords(this.chunkLocation.chunkXPos, this.chunkLocation.chunkZPos), (this.flagsYAreasToUpdate == 0xFFFF), this.flagsYAreasToUpdate)); // CraftBukkit - send everything (including biome) if all sections flagged
 
                         // Forge: Grabs ALL tile entities is costly on a modded server, only send needed ones
                         for (k = 0; false && k < 16; ++k)
