--- ../src-base/minecraft/net/minecraft/inventory/ContainerEnchantment.java
+++ ../src-work/minecraft/net/minecraft/inventory/ContainerEnchantment.java
@@ -4,6 +4,8 @@
 import cpw.mods.fml.relauncher.SideOnly;
 import java.util.List;
 import java.util.Random;
+
+import net.minecraft.enchantment.Enchantment;
 import net.minecraft.enchantment.EnchantmentData;
 import net.minecraft.enchantment.EnchantmentHelper;
 import net.minecraft.entity.player.EntityPlayer;
@@ -14,24 +16,23 @@
 import net.minecraft.world.World;
 import net.minecraftforge.common.ForgeHooks;
 
+// CraftBukkit start
+import java.util.Map;
+
+import org.bukkit.craftbukkit.inventory.CraftInventoryEnchanting;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.enchantment.EnchantItemEvent;
+import org.bukkit.event.enchantment.PrepareItemEnchantEvent;
+import org.bukkit.entity.Player;
+// CraftBukkit end
+
 public class ContainerEnchantment extends Container
 {
     // JAVADOC FIELD $$ field_75168_e
-    public IInventory tableInventory = new InventoryBasic("Enchant", true, 1)
-    {
-        private static final String __OBFID = "CL_00001746";
-        // JAVADOC METHOD $$ func_70297_j_
-        public int getInventoryStackLimit()
-        {
-            return 1;
-        }
-        // JAVADOC METHOD $$ func_70296_d
-        public void onInventoryChanged()
-        {
-            super.onInventoryChanged();
-            ContainerEnchantment.this.onCraftMatrixChanged(this);
-        }
-    };
+    // CraftBukkit - make type specific (changed from IInventory)
+    public ContainerEnchantTableInventory tableInventory_CB = new ContainerEnchantTableInventory(this, "Enchant", true, 1); // CraftBukkit
+    public IInventory tableInventory = tableInventory_CB;
     // JAVADOC FIELD $$ field_75172_h
     private World worldPointer;
     private int posX;
@@ -42,6 +43,10 @@
     public long nameSeed;
     // JAVADOC FIELD $$ field_75167_g
     public int[] enchantLevels = new int[3];
+    // CraftBukkit start
+    private CraftInventoryView bukkitEntity = null;
+    private Player player;
+    // CraftBukkit end
     private static final String __OBFID = "CL_00001745";
 
     public ContainerEnchantment(InventoryPlayer par1InventoryPlayer, World par2World, int par3, int par4, int par5)
@@ -73,6 +78,11 @@
         {
             this.addSlotToContainer(new Slot(par1InventoryPlayer, l, 8 + l * 18, 142));
         }
+
+        // CraftBukkit start
+        player = (Player) par1InventoryPlayer.player.getBukkitEntity();
+        tableInventory_CB.player = player; // MCPC+
+        // CraftBukkit end
     }
 
     public void addCraftingToCrafters(ICrafting par1ICrafting)
@@ -118,7 +128,7 @@
             ItemStack itemstack = par1IInventory.getStackInSlot(0);
             int i;
 
-            if (itemstack != null && itemstack.isItemEnchantable())
+            if (itemstack != null)   // CraftBukkit - relax condition
             {
                 this.nameSeed = this.rand.nextLong();
 
@@ -153,6 +163,23 @@
                         this.enchantLevels[j] = EnchantmentHelper.calcItemStackEnchantability(this.rand, j, (int)power, itemstack);
                     }
 
+                    // CraftBukkit start
+                    CraftItemStack item = CraftItemStack.asCraftMirror(itemstack);
+                    PrepareItemEnchantEvent event = new PrepareItemEnchantEvent(player, this.getBukkitView(), this.worldPointer.getWorld().getBlockAt(this.posX, this.posY, this.posZ), item, this.enchantLevels, i);
+                    event.setCancelled(!itemstack.isItemEnchantable());
+                    this.worldPointer.getServer().getPluginManager().callEvent(event);
+
+                    if (event.isCancelled())
+                    {
+                        for (i = 0; i < 3; ++i)
+                        {
+                            this.enchantLevels[i] = 0;
+                        }
+
+                        return;
+                    }
+
+                    // CraftBukkit end
                     this.detectAndSendChanges();
                 }
             }
@@ -180,32 +207,64 @@
 
                 if (list != null)
                 {
-                    par1EntityPlayer.addExperienceLevel(-this.enchantLevels[par2]);
+                    // CraftBukkit start
+                    Map<org.bukkit.enchantments.Enchantment, Integer> enchants = new java.util.HashMap<org.bukkit.enchantments.Enchantment, Integer>();
 
-                    if (flag)
+                    for (Object obj : list)
                     {
-                        itemstack.func_150996_a(Items.enchanted_book);
+                        EnchantmentData instance = (EnchantmentData) obj;
+                        enchants.put(org.bukkit.enchantments.Enchantment.getById(instance.enchantmentobj.effectId), instance.enchantmentLevel);
                     }
 
-                    int j = flag && list.size() > 1 ? this.rand.nextInt(list.size()) : -1;
+                    CraftItemStack item = CraftItemStack.asCraftMirror(itemstack);
+                    EnchantItemEvent event = new EnchantItemEvent((Player) par1EntityPlayer.getBukkitEntity(), this.getBukkitView(), this.worldPointer.getWorld().getBlockAt(this.posX, this.posY, this.posZ), item, this.enchantLevels[par2], enchants, par2);
+                    this.worldPointer.getServer().getPluginManager().callEvent(event);
+                    int level = event.getExpLevelCost();
 
-                    for (int k = 0; k < list.size(); ++k)
+                    if (event.isCancelled() || (level > par1EntityPlayer.experienceLevel && !par1EntityPlayer.capabilities.isCreativeMode) || enchants.isEmpty())
                     {
-                        EnchantmentData enchantmentdata = (EnchantmentData)list.get(k);
+                        return false;
+                    }
 
-                        if (!flag || k != j)
+                    boolean applied = !flag;
+
+                    for (Map.Entry<org.bukkit.enchantments.Enchantment, Integer> entry : event.getEnchantsToAdd().entrySet())
+                    {
+                        try
                         {
                             if (flag)
                             {
-                                Items.enchanted_book.addEnchantment(itemstack, enchantmentdata);
+                                int enchantId = entry.getKey().getId();
+
+                                if (Enchantment.enchantmentsList[enchantId] == null)
+                                {
+                                    continue;
+                                }
+
+                                EnchantmentData enchantment = new EnchantmentData(enchantId, entry.getValue());
+                                Items.enchanted_book.addEnchantment(itemstack, enchantment);
+                                applied = true;
+                                itemstack.func_150996_a(Items.enchanted_book);
+                                break;
                             }
                             else
                             {
-                                itemstack.addEnchantment(enchantmentdata.enchantmentobj, enchantmentdata.enchantmentLevel);
+                                item.addEnchantment(entry.getKey(), entry.getValue());
                             }
                         }
+                        catch (IllegalArgumentException e)
+                        {
+                            /* Just swallow invalid enchantments */
+                        }
                     }
 
+                    // Only down level if we've applied the enchantments
+                    if (applied)
+                    {
+                        par1EntityPlayer.addExperienceLevel(-level);
+                    }
+
+                    // CraftBukkit end
                     this.onCraftMatrixChanged(this.tableInventory);
                 }
             }
@@ -236,7 +295,12 @@
 
     public boolean canInteractWith(EntityPlayer par1EntityPlayer)
     {
-        return this.worldPointer.func_147439_a(this.posX, this.posY, this.posZ) != Blocks.enchanting_table ? false : par1EntityPlayer.getDistanceSq((double)this.posX + 0.5D, (double)this.posY + 0.5D, (double)this.posZ + 0.5D) <= 64.0D;
+        if (!this.checkReachable)
+        {
+            return true;    // CraftBukkit
+        }
+
+        return this.worldPointer.func_147439_a(this.posX, this.posY, this.posZ) != Blocks.enchanting_table ? false : par1EntityPlayer.getDistanceSq((double) this.posX + 0.5D, (double) this.posY + 0.5D, (double) this.posZ + 0.5D) <= 64.0D;
     }
 
     // JAVADOC METHOD $$ func_82846_b
@@ -295,4 +359,18 @@
 
         return itemstack;
     }
+
+    // CraftBukkit start
+    public CraftInventoryView getBukkitView()
+    {
+        if (bukkitEntity != null)
+        {
+            return bukkitEntity;
+        }
+
+        CraftInventoryEnchanting inventory = new CraftInventoryEnchanting(this.tableInventory_CB);
+        bukkitEntity = new CraftInventoryView(this.player, inventory, this);
+        return bukkitEntity;
+    }
+    // CraftBukkit end
 }
